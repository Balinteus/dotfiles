#!/usr/bin/bash

# Show help message
show_help() {
	echo -e "fixname - Replaces weird chars in file and dir names.\n
Options:
\t-h or --help\t\tShows this help message.
\t-d or --dir-only\tPerforms fixname only on directories.
\t-f or --file-only\tPerforms fixname only on files.
\t-i or --interactive\tPerforms fixname interactively.
\nArguments:
\t'NO ARGUMENTS'\t\tPerforms fixname on all the files in the current working \
dir.
\t'WITH ARGUMENTS'\tPerforms fixname on the given files (separated by space)."
}

# Script state
dir_only=0
file_only=0
do_interactively=0

# Initialize counters
declare -i rename_counter input_num
rename_counter=0
input_num=0

# Get options
while getopts "hdfi" opt; do
	case "$opt" in
		h|help) show_help; exit 0 ;;
		d|dir-only) dir_only=1 ;;
		f|file-only) file_only=1 ;;
		i|interactively) do_interactively=1 ;;
	esac
done

shift $((OPTIND - 1))

# Create a dict with the accented characters
declare -A accented_chars
accented_chars+=( [á]=a [é]=e [í]=i [ó]=o [ö]=o [ő]=o [ú]=u [ü]=u [ű]=u )
accented_chars+=( [Á]=A [É]=E [Í]=I [Ó]=O [Ö]=O [Ő]=O [Ú]=U [Ü]=U [Ű]=U )

# Replaces the spaces with underscores
remove_spaces() {
	space="\ "
	separator="_"
	echo "$1" | sed "s/$space/$separator/g"
}

# Replaces the accented characters in the given string
replace_accented() {
	temp="$1"

	for key in "${!accented_chars[@]}"; do
		if [[ $1 == *"$key"* ]]; then
			temp=$(echo "$temp" | sed "s/$key/${accented_chars[$key]}/g")
		fi
	done

	echo "$temp"
}

# Fixname
fix_up_name() {
	# Construct the new name of the file
	fixed_name="$(replace_accented "$(remove_spaces "$1")")"

	# If the interactive options is set, then ask for confirmation
	while (( $do_interactively )); do
		read -p "Do you want to rename '$1' to '$fixed_name'? [y/n] " optr
		case $optr in
			[Yy]* ) break ;;
			[Nn]* ) exit 1 ;;
		esac
	done

	# Check if an actual name change happend
	if [[ "$1" != "$fixed_name" ]]; then
		if (( $(mv -vi "$1" "$fixed_name" | tee /dev/tty | wc -l) >= 1)); then
			exit 0
		else
			exit 1
		fi
	else
		# If the name remains the same after the change, then skip the renaming
		# Exit with an error, so we don't increment the counter
		exit 1
	fi

	# Exit with success
	# This tells the incrementer to count the operation as a success
	exit 0
}

# Filter checker
# (parameter 1: function to be executed, paramter 2: filename)
check_filters() {
	if [[ -e "$2" ]] && (
		( [[ -d "$2" ]] && (( $dir_only )) ) ||
		( [[ -f "$2" ]] && (( $file_only )) ) ||
		( (( !dir_only && !file_only )) )
	); then
		# Check if we need to increment the rename_counter
		if ( $1 "$2" ); then
			rename_counter+=1
		fi
	else
		echo -e "ERROR: \"$2\" can't be renamed, because it doesn't comply \
with the given filters or the passed filename doesn't exist!"
	fi
}

# Main script logic

# If no arguments were given, then scan the whole working dir
if [[ $# -eq 0 ]]; then
	echo -e "Renaming all the files in the current dir..."

	# Get the number of files in the current dir
	input_num=$(shopt -s nullglob;num_of_files=(*);echo "${#num_of_files[@]}")

	# Iterate through the files in the dir
	for file in *; do
		# Check filters & do the renaming
		check_filters fix_up_name "$file"
	done
else
	echo -e "Renaming the given files..."

	for arg in "$@"; do
		# Count given files
		input_num+=1

		# Check filters & do the renaming
		check_filters fix_up_name "$arg"
	done
fi

echo -e "Operation completed! Renamed $rename_counter/$input_num files."
